mod op;
mod tpob;
mod tptb;
mod fplotd;
mod readdkb;
mod eamutkb;
mod reparamkb;
mod eacrosskb;

use std::fs;
use std::env;
use rand::Rng;
use std::time::Instant;
use std::process::exit;
use indicatif::ProgressBar;

use light_curve_feature::TimeSeries;
use light_curve_feature::FeatureEvaluator;
use light_curve_feature::features::AndersonDarlingNormal;

fn helpf() 
{
    println!("\n Program ea_main_rust, version of 02 Jun 2021.");
    println!(" Usage: ea_main_rust <file> [n_of_parameters = 7] [n_of_population = 200] [--plot]");
    println!("\n    n_of_parameters = 4 or 7 or 8");
    exit(2137);
}

fn anderson_darling_test(data: &Vec<f64>) -> f64 
{
    let ad = AndersonDarlingNormal::default();
    let mut timeseries = TimeSeries::new(vec![0.0; data.len()],data.clone(),vec![0.0; data.len()]);
    let wyn = ad.eval(&mut timeseries);
    let wyn = wyn.unwrap();
    return wyn[0];
}

fn ea_cr(s: &Vec<Vec<f64>>, u: &Vec<Vec<f64>>, time: &Vec<f64>, flux: &Vec<f64>, err: &Vec<f64>) -> (Vec<Vec<f64>>,usize,f64,f64)
{    
    let mut min_t = 100000;
    let mut new_s = s.to_vec();
    let mut min_ti: f64 = 0f64;
    let mut minchi: f64 = 0f64;
    let mut minad: f64 = 0f64;
    let (mut flare_s, mut flare_u, mut pars, mut paru);
    
    for i in 0..s[0].len()
    {
        match s.len()
        {
            4 => {
                pars = reparamkb::re_param(&vec![s[0][i],s[1][i],s[2][i],s[3][i]]);
                paru = reparamkb::re_param(&vec![u[0][i],u[1][i],u[2][i],u[3][i]]);
                flare_s = op::one_profile(time,pars[0],pars[1],pars[2],pars[3]);
                flare_u = op::one_profile(time,paru[0],paru[1],paru[2],paru[3]);
            }
            7 => {
                pars = reparamkb::re_param(&vec![s[0][i],s[1][i],s[2][i],s[3][i],s[4][i],s[5][i],s[6][i]]);
                paru = reparamkb::re_param(&vec![u[0][i],u[1][i],u[2][i],u[3][i],u[4][i],u[5][i],u[6][i]]);
                flare_s = tpob::two_profiles_one_b(time,pars[0],pars[1],pars[2],pars[3],pars[4],pars[5],pars[6]);
                flare_u = tpob::two_profiles_one_b(time,paru[0],paru[1],paru[2],paru[3],paru[4],paru[5],paru[6]);
            }
            8 => {
                pars = reparamkb::re_param(&vec![s[0][i],s[1][i],s[2][i],s[3][i],s[4][i],s[5][i],s[6][i],s[7][i]]);
                paru = reparamkb::re_param(&vec![u[0][i],u[1][i],u[2][i],u[3][i],u[4][i],u[5][i],u[6][i],u[7][i]]);
                flare_s = tptb::two_profiles_two_b(time,pars[0],pars[1],pars[2],pars[3],pars[4],pars[5],pars[6],pars[7]);
                flare_u = tptb::two_profiles_two_b(time,paru[0],paru[1],paru[2],paru[3],paru[4],paru[5],paru[6],paru[7]);
            } 
            _ => {exit(1);}
        }

        let (mut chi_s, mut chi_u) = (0f64, 0f64);

        for k in 0..time.len()
        {
            chi_s += ((flare_s[k]-flux[k])/err[k]).powf(2.0);
            chi_u += ((flare_u[k]-flux[k])/err[k]).powf(2.0);
        }

        let (mut diff_u, mut diff_s) = (vec![0.0; time.len()],vec![0.0; time.len()]);

        for i in 0..time.len()
        {
            diff_u[i] = flux[i] - flare_u[i];
            diff_s[i] = flux[i] - flare_s[i];
        }

        let (ads, adu) = (chi_s.clone()/((time.len()-s.len()) as f64)+5.0*anderson_darling_test(&diff_s).powf(0.5),chi_u.clone()/((time.len()-s.len()) as f64)+5.0*anderson_darling_test(&diff_u).powf(0.5));
        
        if ads >= adu {for j in 0..new_s.len() {new_s[j][i] = u[j][i];} }
        minchi = chi_s; minad = ads;
        if ads >= adu {minchi = chi_u; minad = adu}
        if i == 0 
        {
            //min_ti = minchi; 
            min_ti = minad; 
            min_t = i;
        }
        else if min_ti > minad//minchi
        {
            min_t = i;
        }
    }
    
    return (new_s, min_t, minchi,minad);
}

fn ea_main(file: &str, params: usize, n_s: usize, plotctrl: bool, savectrl: bool)
{
    let start = Instant::now();
    let mut s = vec![];
    let ntryes = 10000;
    let nss = n_s as f64;
    let mut minchi = 0f64;
    let mut t: usize = 10;
    let pb = ProgressBar::new(ntryes);
    let (mut leg1, mut leg2) = ("","");
    let mut background = vec![0f64;1000];
    let (para, profile, profile1, profile2);
    let mut time2: Vec<f64> = vec![0f64;1000];
    let (mut m, mut v, mut u, mut result, tit);
    let mut scalars = vec![12f64,6f64,6f64,8f64,12f64,6f64,6f64,8f64];
    let (time,flux,err,a,b,_istart,_istop,fluxbak,timefull,fluxfull) = readdkb::read_data(file);
    let mut diff: f64 = time[time.len()-1]-time[0];
    let mut nel: f64 = time2.len() as f64;
    diff /= nel;

    let mut minad: f64 = 0f64;

    if n_s <= 10 
    {
        let temp_t = (nss-1f64)/2f64;
        t = temp_t.round() as usize;
    }

    if params == 7 {scalars[6] = 8f64;}
    for i in 0..params
    {
        let mut indeksy = vec![0f64; n_s];
        for j in 0..n_s {indeksy[j] = rand::thread_rng().gen_range(0f64..1f64)*scalars[i];}
        s.push(indeksy);
    }

    for i in 0..ntryes
    {
        if i <= 1000 {m = 0.9f64;}
        else {m = 0.2f64;}
        v = eamutkb::ea_mut(m,&s,t);
        u = eacrosskb::ea_cross(0.1f64,&s,&v);
        result = ea_cr(&s,&u,&time,&flux,&err);
        s = result.0; t = result.1; minchi = result.2; minad = result.3;
        pb.inc(1);
    }
    pb.finish_with_message("Done!");
    println!("chi^2/(N-{}) = {}",params,minchi/( (time.len()-params) as f64 ) );
    println!("chi^2/(N-{}) + 5*AD^0.5 = {}",params,minad);

    for i in 0..time2.len()
    {
        nel = i as f64;
        time2[i] = time[0] + nel*diff;
        background[i] = time2[i]*a+b
    }

    match params
    {
        4 => {
            para = reparamkb::re_param(&vec![s[0][t],s[1][t],s[2][t],s[3][t]]);
            profile = op::one_profile(&time2,para[0],para[1],para[2],para[3]);
            profile1 = vec![]; profile2 = vec![];
            tit = format!("A = {}, B = {}, C = {}, D = {}",para[0],para[1],para[2],para[3]);
        }
        7 => {
            para = reparamkb::re_param(&vec![s[0][t],s[1][t],s[2][t],s[3][t],s[4][t],s[5][t],s[6][t]]);
            profile = tpob::two_profiles_one_b(&time2,para[0],para[1],para[2],para[3],para[4],para[5],para[6]);
            profile1 = op::one_profile(&time2,para[0],para[1],para[2],para[3]); leg1 = "A1, B, C1, D1";
            profile2 = op::one_profile(&time2,para[4],para[1],para[5],para[6]); leg2 = "A2, B, C2, D2";
            tit = format!("A1 = {}, B = {}, C1 = {}, D1 = {}\nA2 = {}, B = {}, C2 = {}, D3 = {}",para[0],para[1],para[2],para[3],para[4],para[1],para[5],para[6]);
        }
        8 => {
            para = reparamkb::re_param(&vec![s[0][t],s[1][t],s[2][t],s[3][t],s[4][t],s[5][t],s[6][t],s[7][t]]);
            profile = tptb::two_profiles_two_b(&time2,para[0],para[1],para[2],para[3],para[4],para[5],para[6],para[7]);
            profile1 = op::one_profile(&time2,para[0],para[1],para[2],para[3]); leg1 = "A1, B1, C1, D1";
            profile2 = op::one_profile(&time2,para[4],para[5],para[6],para[7]); leg2 = "A2, B2, C2, D2";
            tit = format!("A1 = {}, B1 = {}, C1 = {}, D1 = {}\nA2 = {}, B2 = {}, C2 = {}, D3 = {}",para[0],para[1],para[2],para[3],para[4],para[5],para[6],para[7]); 
        }
        _ => {exit(666);}
    }

    println!("{:?}",para);

    let duration = start.elapsed();
    println!("Execution time: {:?}", duration);

    if plotctrl
    {
        let (xlab, ylab) = ("Time [minutes]".to_string(),"Normalized flux".to_string());
        let col = "#DD2B2B".to_string(); //"#6495ED"
        fplotd::fplotd(&time,&time2,&background,&profile,tit,xlab,ylab,col,&fluxbak,&fluxfull,&timefull,&profile1,&profile2,leg1.to_string(),leg2.to_string());
    }
    else if savectrl
    {
        let parameters;
        match params
        {
            4 => {parameters = format!("{} {} {} {}\n{} {}",para[0],para[1],para[2],para[3],a,b);}
            7 => {parameters = format!("{} {} {} {}\n{} {} {} {}\n{} {}",para[0],para[1],para[2],para[3],para[4],para[1],para[5],para[6],a,b);}
            8 => {parameters = format!("{} {} {} {}\n{} {} {} {}\n{} {}",para[0],para[1],para[2],para[3],para[4],para[5],para[6],para[7],a,b);}
            _ => {exit(666);}
        }
        fs::write("parametry_rust.txt", parameters).expect("Unable to write file");

    }    
}

fn main() 
{
    let argc = env::args().len();
    let mut file: &str = "rozblysk.dat";
    let (mut params, mut n_pop) = (7, 200);
    let argv: Vec<String> = env::args().collect();
    let (mut plotctrl, mut savectrl) = (false, false);

    match argc
    {
        2 => {file = &argv[1];}
        3 => {
            file = &argv[1]; 
            if argv[2].eq("--plot") {plotctrl = true;}
            else if argv[2].eq("--save") {savectrl = true;}
            else {params = argv[2].parse().unwrap();}
        }
        4 => {
            file = &argv[1]; 
            let num: &str  = &argv[2];
            params = num.parse().unwrap();
            if argv[3].eq("--plot") {plotctrl = true;}
            else if argv[3].eq("--save") {savectrl = true;}
            else {n_pop = argv[3].parse().unwrap();}
        }
        5 => {
            file = &argv[1]; 
            params = argv[2].parse().unwrap();
            n_pop = argv[3].parse().unwrap();
            if argv[4].eq("--plot") {plotctrl = true;}
            else if argv[4].eq("--save") {savectrl = true;}
        }
        _ => {helpf();}
    }

    if params != 4 && params != 7 && params != 8 {helpf();}
    ea_main(file,params,n_pop,plotctrl,savectrl);
}